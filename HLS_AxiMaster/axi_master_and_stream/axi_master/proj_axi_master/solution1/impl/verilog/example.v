// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=133,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=95}" *)

module example (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_req_din,
        a_req_full_n,
        a_req_write,
        a_rsp_empty_n,
        a_rsp_read,
        a_address,
        a_datain,
        a_dataout,
        a_size,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        byte_wroffset,
        ctrl_reg,
        status_reg,
        status_reg_ap_vld,
        interrupt_r,
        interrupt_r_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_pp0_stg0_fsm_4 = 7'b10000;
parameter    ap_ST_st8_fsm_5 = 7'b100000;
parameter    ap_ST_st9_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_80 = 32'b10000000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   a_req_din;
input   a_req_full_n;
output   a_req_write;
input   a_rsp_empty_n;
output   a_rsp_read;
output  [31:0] a_address;
input  [31:0] a_datain;
output  [31:0] a_dataout;
output  [31:0] a_size;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [31:0] byte_wroffset;
input  [31:0] ctrl_reg;
output  [31:0] status_reg;
output   status_reg_ap_vld;
output   interrupt_r;
output   interrupt_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_req_din;
reg a_req_write;
reg stream_in_TREADY;
reg interrupt_r_ap_vld;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm = 7'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg   [31:0] byte_wroffset_0_data_reg = 32'b00000000000000000000000000000000;
reg    byte_wroffset_0_vld_reg = 1'b0;
reg    byte_wroffset_0_ack_out;
reg   [31:0] ctrl_reg_0_data_reg = 32'b00000000000000000000000000000000;
reg    ctrl_reg_0_vld_reg = 1'b0;
reg    ctrl_reg_0_ack_out;
reg   [31:0] status_reg_1_data_reg = 32'b00000000000000000000000000000000;
reg    status_reg_1_vld_reg = 1'b0;
reg    status_reg_1_vld_in;
reg    status_reg_1_ack_in;
reg   [0:0] int_pending = 1'b0;
reg   [31:0] count = 32'b00000000000000000000000000000000;
reg   [7:0] indvar_reg_178;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_138;
wire   [0:0] tmp_1_fu_216_p2;
reg   [0:0] tmp_1_reg_349;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_151;
wire   [0:0] brmerge_fu_226_p2;
reg   [0:0] brmerge_reg_359;
wire   [0:0] exitcond_fu_231_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_162;
reg    ap_sig_bdd_167;
wire   [7:0] i_1_fu_237_p2;
reg   [31:0] a_addr_reg_372;
wire   [0:0] exitcond3_fu_267_p2;
reg   [0:0] exitcond3_reg_377;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_4;
reg    ap_sig_bdd_183;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond3_reg_377_pp0_it1;
reg    ap_sig_bdd_193;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [7:0] indvar_next_fu_273_p2;
wire   [0:0] is_0iter_fu_284_p2;
reg   [0:0] is_0iter_reg_391;
reg   [0:0] ap_reg_ppstg_is_0iter_reg_391_pp0_it1;
wire   [31:0] buff_q0;
reg   [31:0] buff_load_reg_395;
wire   [31:0] tmp_5_fu_294_p2;
reg    ap_sig_cseq_ST_st8_fsm_5;
reg    ap_sig_bdd_221;
reg   [6:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
wire   [31:0] buff_d0;
reg   [7:0] i_reg_167;
reg   [0:0] int_pending_flag_phi_fu_193_p4;
reg   [0:0] int_pending_flag_reg_189;
reg    ap_sig_cseq_ST_st9_fsm_6;
reg    ap_sig_bdd_252;
reg   [0:0] int_pending_loc_phi_fu_204_p4;
reg   [0:0] int_pending_loc_reg_201;
wire   [63:0] tmp_3_fu_243_p1;
wire   [63:0] tmp_6_fu_279_p1;
wire   [63:0] tmp_7_fu_257_p1;
wire   [0:0] rev_fu_314_p2;
wire   [0:0] int_pending_flag_s_fu_320_p2;
wire   [0:0] tmp_2_fu_212_p1;
wire   [29:0] tmp_fu_248_p4;
wire   [0:0] tmp_8_fu_307_p3;
reg   [6:0] ap_NS_fsm;


example_buff #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buff_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( buff_address0 ),
    .ce0( buff_ce0 ),
    .we0( buff_we0 ),
    .d0( buff_d0 ),
    .q0( buff_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_267_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond3_fu_267_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_267_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// byte_wroffset_0_data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_byte_wroffset_0_data_reg
    if (ap_rst_n_inv == 1'b1) begin
        byte_wroffset_0_data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == byte_wroffset_0_vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == byte_wroffset_0_vld_reg) & (ap_const_logic_1 == byte_wroffset_0_ack_out)))) begin
            byte_wroffset_0_data_reg <= byte_wroffset;
        end
    end
end

/// ctrl_reg_0_data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ctrl_reg_0_data_reg
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_reg_0_data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == ctrl_reg_0_vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == ctrl_reg_0_vld_reg) & (ap_const_logic_1 == ctrl_reg_0_ack_out)))) begin
            ctrl_reg_0_data_reg <= ctrl_reg;
        end
    end
end

/// status_reg_1_data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_status_reg_1_data_reg
    if (ap_rst_n_inv == 1'b1) begin
        status_reg_1_data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == status_reg_1_vld_in) & (ap_const_logic_0 == status_reg_1_vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == status_reg_1_vld_in) & (ap_const_logic_1 == status_reg_1_vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
            status_reg_1_data_reg <= tmp_5_fu_294_p2;
        end
    end
end

/// status_reg_1_vld_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_status_reg_1_vld_reg
    if (ap_rst_n_inv == 1'b1) begin
        status_reg_1_vld_reg <= ap_const_logic_0;
    end else begin
        if ((~(~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) & (ap_const_logic_1 == status_reg_1_vld_in) & (ap_const_logic_0 == status_reg_1_vld_reg))) begin
            status_reg_1_vld_reg <= ap_const_logic_1;
        end else if (((ap_const_logic_0 == status_reg_1_vld_in) & (ap_const_logic_1 == status_reg_1_vld_reg) & (ap_const_logic_1 == ap_const_logic_1))) begin
            status_reg_1_vld_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_231_p2) & ~ap_sig_bdd_167)) begin
        i_reg_167 <= i_1_fu_237_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == brmerge_fu_226_p2))) begin
        i_reg_167 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond3_fu_267_p2))) begin
        indvar_reg_178 <= indvar_next_fu_273_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2))) begin
        indvar_reg_178 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0) & (ap_const_lv1_0 == brmerge_reg_359))) begin
        int_pending_flag_reg_189 <= ap_const_lv1_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == brmerge_fu_226_p2))) begin
        int_pending_flag_reg_189 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0) & (ap_const_lv1_0 == brmerge_reg_359))) begin
        int_pending_loc_reg_201 <= ap_const_lv1_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == brmerge_fu_226_p2))) begin
        int_pending_loc_reg_201 <= int_pending;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2))) begin
        a_addr_reg_372[29 : 0] <= tmp_7_fu_257_p1[29 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_reg_ppstg_exitcond3_reg_377_pp0_it1 <= exitcond3_reg_377;
        ap_reg_ppstg_is_0iter_reg_391_pp0_it1 <= is_0iter_reg_391;
        buff_load_reg_395 <= buff_q0;
        exitcond3_reg_377 <= exitcond3_fu_267_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        brmerge_reg_359 <= brmerge_fu_226_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_5)) begin
        count <= tmp_5_fu_294_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0) & ~(ap_const_lv1_0 == int_pending_flag_s_fu_320_p2))) begin
        int_pending <= rev_fu_314_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond3_fu_267_p2))) begin
        is_0iter_reg_391 <= is_0iter_fu_284_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_1_reg_349 <= tmp_1_fu_216_p2;
    end
end

/// a_req_din assign process. ///
always @ (ap_reg_ppstg_exitcond3_reg_377_pp0_it1 or ap_sig_bdd_193 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_is_0iter_reg_391_pp0_it1)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == ap_reg_ppstg_is_0iter_reg_391_pp0_it1)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_377_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        a_req_din = ap_const_logic_1;
    end else begin
        a_req_din = ap_const_logic_0;
    end
end

/// a_req_write assign process. ///
always @ (ap_reg_ppstg_exitcond3_reg_377_pp0_it1 or ap_sig_bdd_193 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_is_0iter_reg_391_pp0_it1)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == ap_reg_ppstg_is_0iter_reg_391_pp0_it1)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_377_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        a_req_write = ap_const_logic_1;
    end else begin
        a_req_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (status_reg_1_ack_in or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (status_reg_1_ack_in or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. ///
always @ (ap_sig_bdd_183)
begin
    if (ap_sig_bdd_183) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25)
begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_138)
begin
    if (ap_sig_bdd_138) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_151)
begin
    if (ap_sig_bdd_151) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_5 assign process. ///
always @ (ap_sig_bdd_221)
begin
    if (ap_sig_bdd_221) begin
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_6 assign process. ///
always @ (ap_sig_bdd_252)
begin
    if (ap_sig_bdd_252) begin
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_0;
    end
end

/// buff_address0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_pp0_stg0_fsm_4 or ap_reg_ppiten_pp0_it0 or tmp_3_fu_243_p1 or tmp_6_fu_279_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        buff_address0 = tmp_3_fu_243_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        buff_address0 = tmp_6_fu_279_p1;
    end else begin
        buff_address0 = 'bx;
    end
end

/// buff_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_167 or ap_sig_cseq_ST_pp0_stg0_fsm_4 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_193 or ap_reg_ppiten_pp0_it2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_167) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        buff_ce0 = ap_const_logic_1;
    end else begin
        buff_ce0 = ap_const_logic_0;
    end
end

/// buff_we0 assign process. ///
always @ (exitcond_fu_231_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_167)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_231_p2) & ~ap_sig_bdd_167)) begin
        buff_we0 = ap_const_logic_1;
    end else begin
        buff_we0 = ap_const_logic_0;
    end
end

/// byte_wroffset_0_ack_out assign process. ///
always @ (status_reg_1_ack_in or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0))) begin
        byte_wroffset_0_ack_out = ap_const_logic_1;
    end else begin
        byte_wroffset_0_ack_out = ap_const_logic_0;
    end
end

/// ctrl_reg_0_ack_out assign process. ///
always @ (status_reg_1_ack_in or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0))) begin
        ctrl_reg_0_ack_out = ap_const_logic_1;
    end else begin
        ctrl_reg_0_ack_out = ap_const_logic_0;
    end
end

/// int_pending_flag_phi_fu_193_p4 assign process. ///
always @ (brmerge_reg_359 or int_pending_flag_reg_189 or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & (ap_const_lv1_0 == brmerge_reg_359))) begin
        int_pending_flag_phi_fu_193_p4 = ap_const_lv1_1;
    end else begin
        int_pending_flag_phi_fu_193_p4 = int_pending_flag_reg_189;
    end
end

/// int_pending_loc_phi_fu_204_p4 assign process. ///
always @ (brmerge_reg_359 or ap_sig_cseq_ST_st9_fsm_6 or int_pending_loc_reg_201)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & (ap_const_lv1_0 == brmerge_reg_359))) begin
        int_pending_loc_phi_fu_204_p4 = ap_const_lv1_1;
    end else begin
        int_pending_loc_phi_fu_204_p4 = int_pending_loc_reg_201;
    end
end

/// interrupt_r_ap_vld assign process. ///
always @ (status_reg_1_ack_in or ap_sig_cseq_ST_st9_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_6) & ~(status_reg_1_ack_in == ap_const_logic_0))) begin
        interrupt_r_ap_vld = ap_const_logic_1;
    end else begin
        interrupt_r_ap_vld = ap_const_logic_0;
    end
end

/// status_reg_1_ack_in assign process. ///
always @ (status_reg_1_vld_reg)
begin
    if (((ap_const_logic_0 == status_reg_1_vld_reg) | ((ap_const_logic_1 == status_reg_1_vld_reg) & (ap_const_logic_1 == ap_const_logic_1)))) begin
        status_reg_1_ack_in = ap_const_logic_1;
    end else begin
        status_reg_1_ack_in = ap_const_logic_0;
    end
end

/// status_reg_1_vld_in assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_5)) begin
        status_reg_1_vld_in = ap_const_logic_1;
    end else begin
        status_reg_1_vld_in = ap_const_logic_0;
    end
end

/// stream_in_TREADY assign process. ///
always @ (exitcond_fu_231_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_167)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_231_p2) & ~ap_sig_bdd_167)) begin
        stream_in_TREADY = ap_const_logic_1;
    end else begin
        stream_in_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or status_reg_1_ack_in or brmerge_fu_226_p2 or exitcond_fu_231_p2 or ap_sig_bdd_167 or exitcond3_fu_267_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_193 or ap_reg_ppiten_pp0_it2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == brmerge_fu_226_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_6;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((~ap_sig_bdd_167 & ~(ap_const_lv1_0 == exitcond_fu_231_p2))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end else if (((ap_const_lv1_0 == exitcond_fu_231_p2) & ~ap_sig_bdd_167)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_pp0_stg0_fsm_4 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_267_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_267_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end
        end
        ap_ST_st8_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_6;
        end
        ap_ST_st9_fsm_6 : 
        begin
            if (~(status_reg_1_ack_in == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_6;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address = a_addr_reg_372;
assign a_dataout = buff_load_reg_395;
assign a_rsp_read = ap_const_logic_0;
assign a_size = ap_const_lv32_80;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_138 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_138 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_151 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_151 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_167 assign process. ///
always @ (stream_in_TVALID or exitcond_fu_231_p2)
begin
    ap_sig_bdd_167 = ((stream_in_TVALID == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_fu_231_p2));
end

/// ap_sig_bdd_183 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_183 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_193 assign process. ///
always @ (a_req_full_n or ap_reg_ppstg_exitcond3_reg_377_pp0_it1)
begin
    ap_sig_bdd_193 = ((a_req_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_377_pp0_it1));
end

/// ap_sig_bdd_221 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_221 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_252 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_252 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end
assign brmerge_fu_226_p2 = (int_pending | tmp_1_reg_349);
assign buff_d0 = stream_in_TDATA;
assign exitcond3_fu_267_p2 = (indvar_reg_178 == ap_const_lv8_80? 1'b1: 1'b0);
assign exitcond_fu_231_p2 = (i_reg_167 == ap_const_lv8_80? 1'b1: 1'b0);
assign i_1_fu_237_p2 = (i_reg_167 + ap_const_lv8_1);
assign indvar_next_fu_273_p2 = (indvar_reg_178 + ap_const_lv8_1);
assign int_pending_flag_s_fu_320_p2 = (int_pending_flag_phi_fu_193_p4 | tmp_8_fu_307_p3);
assign interrupt_r = (int_pending_loc_phi_fu_204_p4 & rev_fu_314_p2);
assign is_0iter_fu_284_p2 = (indvar_reg_178 == ap_const_lv8_0? 1'b1: 1'b0);
assign rev_fu_314_p2 = (tmp_8_fu_307_p3 ^ ap_const_lv1_1);
assign status_reg = status_reg_1_data_reg;
assign status_reg_ap_vld = status_reg_1_vld_reg;
assign tmp_1_fu_216_p2 = (tmp_2_fu_212_p1 ^ ap_const_lv1_1);
assign tmp_2_fu_212_p1 = ctrl_reg_0_data_reg[0:0];
assign tmp_3_fu_243_p1 = i_reg_167;
assign tmp_5_fu_294_p2 = (count + ap_const_lv32_80);
assign tmp_6_fu_279_p1 = indvar_reg_178;
assign tmp_7_fu_257_p1 = tmp_fu_248_p4;
assign tmp_8_fu_307_p3 = ctrl_reg_0_data_reg[ap_const_lv32_1];
assign tmp_fu_248_p4 = {{byte_wroffset_0_data_reg[ap_const_lv32_1F : ap_const_lv32_2]}};
always @ (posedge ap_clk)
begin
    byte_wroffset_0_vld_reg <= 1'b0;
    ctrl_reg_0_vld_reg <= 1'b0;
    a_addr_reg_372[31:30] <= 2'b00;
end



endmodule //example

