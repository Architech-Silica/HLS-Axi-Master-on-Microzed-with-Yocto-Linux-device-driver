// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> example::ap_ST_st1_fsm_0 = "1";
const sc_lv<7> example::ap_ST_st2_fsm_1 = "10";
const sc_lv<7> example::ap_ST_st3_fsm_2 = "100";
const sc_lv<7> example::ap_ST_st4_fsm_3 = "1000";
const sc_lv<7> example::ap_ST_pp0_stg0_fsm_4 = "10000";
const sc_lv<7> example::ap_ST_st8_fsm_5 = "100000";
const sc_lv<7> example::ap_ST_st9_fsm_6 = "1000000";
const sc_lv<32> example::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> example::ap_const_lv1_1 = "1";
const sc_lv<1> example::ap_const_lv1_0 = "0";
const sc_lv<32> example::ap_const_lv32_1 = "1";
const sc_lv<32> example::ap_const_lv32_2 = "10";
const sc_lv<32> example::ap_const_lv32_3 = "11";
const sc_lv<32> example::ap_const_lv32_4 = "100";
const sc_lv<32> example::ap_const_lv32_5 = "101";
const sc_lv<8> example::ap_const_lv8_0 = "00000000";
const sc_lv<32> example::ap_const_lv32_6 = "110";
const sc_lv<32> example::ap_const_lv32_80 = "10000000";
const sc_lv<8> example::ap_const_lv8_80 = "10000000";
const sc_lv<8> example::ap_const_lv8_1 = "1";
const sc_lv<32> example::ap_const_lv32_1F = "11111";

example::example(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buff_U = new example_buff("buff_U");
    buff_U->clk(ap_clk);
    buff_U->reset(ap_rst_n_inv);
    buff_U->address0(buff_address0);
    buff_U->ce0(buff_ce0);
    buff_U->we0(buff_we0);
    buff_U->d0(buff_d0);
    buff_U->q0(buff_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address);
    sensitive << ( a_addr_reg_372 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_391_pp0_it1 );

    SC_METHOD(thread_a_dataout);
    sensitive << ( ap_reg_ppstg_exitcond3_reg_377_pp0_it1 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( buff_load_reg_395 );

    SC_METHOD(thread_a_req_din);
    sensitive << ( ap_reg_ppstg_exitcond3_reg_377_pp0_it1 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_391_pp0_it1 );

    SC_METHOD(thread_a_req_write);
    sensitive << ( ap_reg_ppstg_exitcond3_reg_377_pp0_it1 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_391_pp0_it1 );

    SC_METHOD(thread_a_rsp_read);

    SC_METHOD(thread_a_size);
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_is_0iter_reg_391_pp0_it1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_138);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_151);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_162);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_167);
    sensitive << ( stream_in_TVALID );
    sensitive << ( exitcond_fu_231_p2 );

    SC_METHOD(thread_ap_sig_bdd_183);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_193);
    sensitive << ( a_req_full_n );
    sensitive << ( ap_reg_ppstg_exitcond3_reg_377_pp0_it1 );

    SC_METHOD(thread_ap_sig_bdd_221);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_252);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_4);
    sensitive << ( ap_sig_bdd_183 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_25 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_138 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_151 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_162 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_5);
    sensitive << ( ap_sig_bdd_221 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_6);
    sensitive << ( ap_sig_bdd_252 );

    SC_METHOD(thread_brmerge_fu_226_p2);
    sensitive << ( int_pending );
    sensitive << ( tmp_1_reg_349 );

    SC_METHOD(thread_buff_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_4 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_3_fu_243_p1 );
    sensitive << ( tmp_6_fu_279_p1 );

    SC_METHOD(thread_buff_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_167 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_4 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_buff_d0);
    sensitive << ( stream_in_TDATA );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_buff_we0);
    sensitive << ( exitcond_fu_231_p2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_167 );

    SC_METHOD(thread_byte_wroffset_0_ack_out);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_ctrl_reg_0_ack_out);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_exitcond3_fu_267_p2);
    sensitive << ( indvar_reg_178 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_4 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_exitcond_fu_231_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_167 );
    sensitive << ( i_reg_167 );

    SC_METHOD(thread_i_1_fu_237_p2);
    sensitive << ( i_reg_167 );

    SC_METHOD(thread_indvar_next_fu_273_p2);
    sensitive << ( indvar_reg_178 );

    SC_METHOD(thread_int_pending_flag_phi_fu_193_p4);
    sensitive << ( brmerge_reg_359 );
    sensitive << ( int_pending_flag_reg_189 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_int_pending_flag_s_fu_320_p2);
    sensitive << ( int_pending_flag_phi_fu_193_p4 );
    sensitive << ( tmp_8_fu_307_p3 );

    SC_METHOD(thread_int_pending_loc_phi_fu_204_p4);
    sensitive << ( brmerge_reg_359 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );
    sensitive << ( int_pending_loc_reg_201 );

    SC_METHOD(thread_interrupt_r);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );
    sensitive << ( int_pending_loc_phi_fu_204_p4 );
    sensitive << ( rev_fu_314_p2 );

    SC_METHOD(thread_interrupt_r_ap_vld);
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_6 );

    SC_METHOD(thread_is_0iter_fu_284_p2);
    sensitive << ( indvar_reg_178 );
    sensitive << ( exitcond3_fu_267_p2 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_4 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_rev_fu_314_p2);
    sensitive << ( tmp_8_fu_307_p3 );

    SC_METHOD(thread_status_reg);
    sensitive << ( status_reg_1_data_reg );

    SC_METHOD(thread_status_reg_1_ack_in);
    sensitive << ( status_reg_1_vld_reg );

    SC_METHOD(thread_status_reg_1_vld_in);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_5 );

    SC_METHOD(thread_status_reg_ap_vld);
    sensitive << ( status_reg_1_vld_reg );

    SC_METHOD(thread_stream_in_TREADY);
    sensitive << ( exitcond_fu_231_p2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_bdd_167 );

    SC_METHOD(thread_tmp_1_fu_216_p2);
    sensitive << ( tmp_2_fu_212_p1 );

    SC_METHOD(thread_tmp_2_fu_212_p1);
    sensitive << ( ctrl_reg_0_data_reg );

    SC_METHOD(thread_tmp_3_fu_243_p1);
    sensitive << ( i_reg_167 );

    SC_METHOD(thread_tmp_5_fu_294_p2);
    sensitive << ( count );

    SC_METHOD(thread_tmp_6_fu_279_p1);
    sensitive << ( indvar_reg_178 );

    SC_METHOD(thread_tmp_7_fu_257_p1);
    sensitive << ( tmp_fu_248_p4 );

    SC_METHOD(thread_tmp_8_fu_307_p3);
    sensitive << ( ctrl_reg_0_data_reg );

    SC_METHOD(thread_tmp_fu_248_p4);
    sensitive << ( byte_wroffset_0_data_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( status_reg_1_ack_in );
    sensitive << ( brmerge_fu_226_p2 );
    sensitive << ( exitcond_fu_231_p2 );
    sensitive << ( ap_sig_bdd_167 );
    sensitive << ( exitcond3_fu_267_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_193 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    byte_wroffset_0_data_reg = "00000000000000000000000000000000";
    byte_wroffset_0_vld_reg = SC_LOGIC_0;
    ctrl_reg_0_data_reg = "00000000000000000000000000000000";
    ctrl_reg_0_vld_reg = SC_LOGIC_0;
    status_reg_1_data_reg = "00000000000000000000000000000000";
    status_reg_1_vld_reg = SC_LOGIC_0;
    int_pending = "0";
    count = "00000000000000000000000000000000";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_req_din, "(port)a_req_din");
    sc_trace(mVcdFile, a_req_full_n, "(port)a_req_full_n");
    sc_trace(mVcdFile, a_req_write, "(port)a_req_write");
    sc_trace(mVcdFile, a_rsp_empty_n, "(port)a_rsp_empty_n");
    sc_trace(mVcdFile, a_rsp_read, "(port)a_rsp_read");
    sc_trace(mVcdFile, a_address, "(port)a_address");
    sc_trace(mVcdFile, a_datain, "(port)a_datain");
    sc_trace(mVcdFile, a_dataout, "(port)a_dataout");
    sc_trace(mVcdFile, a_size, "(port)a_size");
    sc_trace(mVcdFile, stream_in_TDATA, "(port)stream_in_TDATA");
    sc_trace(mVcdFile, stream_in_TVALID, "(port)stream_in_TVALID");
    sc_trace(mVcdFile, stream_in_TREADY, "(port)stream_in_TREADY");
    sc_trace(mVcdFile, byte_wroffset, "(port)byte_wroffset");
    sc_trace(mVcdFile, ctrl_reg, "(port)ctrl_reg");
    sc_trace(mVcdFile, status_reg, "(port)status_reg");
    sc_trace(mVcdFile, status_reg_ap_vld, "(port)status_reg_ap_vld");
    sc_trace(mVcdFile, interrupt_r, "(port)interrupt_r");
    sc_trace(mVcdFile, interrupt_r_ap_vld, "(port)interrupt_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_25, "ap_sig_bdd_25");
    sc_trace(mVcdFile, byte_wroffset_0_data_reg, "byte_wroffset_0_data_reg");
    sc_trace(mVcdFile, byte_wroffset_0_vld_reg, "byte_wroffset_0_vld_reg");
    sc_trace(mVcdFile, byte_wroffset_0_ack_out, "byte_wroffset_0_ack_out");
    sc_trace(mVcdFile, ctrl_reg_0_data_reg, "ctrl_reg_0_data_reg");
    sc_trace(mVcdFile, ctrl_reg_0_vld_reg, "ctrl_reg_0_vld_reg");
    sc_trace(mVcdFile, ctrl_reg_0_ack_out, "ctrl_reg_0_ack_out");
    sc_trace(mVcdFile, status_reg_1_data_reg, "status_reg_1_data_reg");
    sc_trace(mVcdFile, status_reg_1_vld_reg, "status_reg_1_vld_reg");
    sc_trace(mVcdFile, status_reg_1_vld_in, "status_reg_1_vld_in");
    sc_trace(mVcdFile, status_reg_1_ack_in, "status_reg_1_ack_in");
    sc_trace(mVcdFile, int_pending, "int_pending");
    sc_trace(mVcdFile, count, "count");
    sc_trace(mVcdFile, indvar_reg_178, "indvar_reg_178");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_138, "ap_sig_bdd_138");
    sc_trace(mVcdFile, tmp_1_fu_216_p2, "tmp_1_fu_216_p2");
    sc_trace(mVcdFile, tmp_1_reg_349, "tmp_1_reg_349");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_151, "ap_sig_bdd_151");
    sc_trace(mVcdFile, brmerge_fu_226_p2, "brmerge_fu_226_p2");
    sc_trace(mVcdFile, brmerge_reg_359, "brmerge_reg_359");
    sc_trace(mVcdFile, exitcond_fu_231_p2, "exitcond_fu_231_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_162, "ap_sig_bdd_162");
    sc_trace(mVcdFile, ap_sig_bdd_167, "ap_sig_bdd_167");
    sc_trace(mVcdFile, i_1_fu_237_p2, "i_1_fu_237_p2");
    sc_trace(mVcdFile, a_addr_reg_372, "a_addr_reg_372");
    sc_trace(mVcdFile, exitcond3_fu_267_p2, "exitcond3_fu_267_p2");
    sc_trace(mVcdFile, exitcond3_reg_377, "exitcond3_reg_377");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_4, "ap_sig_cseq_ST_pp0_stg0_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_183, "ap_sig_bdd_183");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond3_reg_377_pp0_it1, "ap_reg_ppstg_exitcond3_reg_377_pp0_it1");
    sc_trace(mVcdFile, ap_sig_bdd_193, "ap_sig_bdd_193");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, indvar_next_fu_273_p2, "indvar_next_fu_273_p2");
    sc_trace(mVcdFile, is_0iter_fu_284_p2, "is_0iter_fu_284_p2");
    sc_trace(mVcdFile, is_0iter_reg_391, "is_0iter_reg_391");
    sc_trace(mVcdFile, ap_reg_ppstg_is_0iter_reg_391_pp0_it1, "ap_reg_ppstg_is_0iter_reg_391_pp0_it1");
    sc_trace(mVcdFile, buff_q0, "buff_q0");
    sc_trace(mVcdFile, buff_load_reg_395, "buff_load_reg_395");
    sc_trace(mVcdFile, tmp_5_fu_294_p2, "tmp_5_fu_294_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_5, "ap_sig_cseq_ST_st8_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_221, "ap_sig_bdd_221");
    sc_trace(mVcdFile, buff_address0, "buff_address0");
    sc_trace(mVcdFile, buff_ce0, "buff_ce0");
    sc_trace(mVcdFile, buff_we0, "buff_we0");
    sc_trace(mVcdFile, buff_d0, "buff_d0");
    sc_trace(mVcdFile, i_reg_167, "i_reg_167");
    sc_trace(mVcdFile, int_pending_flag_phi_fu_193_p4, "int_pending_flag_phi_fu_193_p4");
    sc_trace(mVcdFile, int_pending_flag_reg_189, "int_pending_flag_reg_189");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_6, "ap_sig_cseq_ST_st9_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_252, "ap_sig_bdd_252");
    sc_trace(mVcdFile, int_pending_loc_phi_fu_204_p4, "int_pending_loc_phi_fu_204_p4");
    sc_trace(mVcdFile, int_pending_loc_reg_201, "int_pending_loc_reg_201");
    sc_trace(mVcdFile, tmp_3_fu_243_p1, "tmp_3_fu_243_p1");
    sc_trace(mVcdFile, tmp_6_fu_279_p1, "tmp_6_fu_279_p1");
    sc_trace(mVcdFile, tmp_7_fu_257_p1, "tmp_7_fu_257_p1");
    sc_trace(mVcdFile, rev_fu_314_p2, "rev_fu_314_p2");
    sc_trace(mVcdFile, int_pending_flag_s_fu_320_p2, "int_pending_flag_s_fu_320_p2");
    sc_trace(mVcdFile, tmp_2_fu_212_p1, "tmp_2_fu_212_p1");
    sc_trace(mVcdFile, tmp_fu_248_p4, "tmp_fu_248_p4");
    sc_trace(mVcdFile, tmp_8_fu_307_p3, "tmp_8_fu_307_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("example.hdltvin.dat");
    mHdltvoutHandle.open("example.hdltvout.dat");
}

example::~example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buff_U;
}

void example::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
             !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                    !ap_sig_bdd_167.read() && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
             !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                     !ap_sig_bdd_167.read() && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
                     !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                    !ap_sig_bdd_167.read() && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()))) {
            ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        byte_wroffset_0_data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, byte_wroffset_0_vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, byte_wroffset_0_vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, byte_wroffset_0_ack_out.read())))) {
            byte_wroffset_0_data_reg = byte_wroffset.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        byte_wroffset_0_vld_reg = ap_const_logic_0;
    } else {
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ctrl_reg_0_data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ctrl_reg_0_vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ctrl_reg_0_vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ctrl_reg_0_ack_out.read())))) {
            ctrl_reg_0_data_reg = ctrl_reg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ctrl_reg_0_vld_reg = ap_const_logic_0;
    } else {
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()) && 
         !ap_sig_bdd_167.read())) {
        i_reg_167 = i_1_fu_237_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_fu_226_p2.read()))) {
        i_reg_167 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()))) {
        indvar_reg_178 = indvar_next_fu_273_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !ap_sig_bdd_167.read() && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()))) {
        indvar_reg_178 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_reg_359.read()))) {
        int_pending_flag_reg_189 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_fu_226_p2.read()))) {
        int_pending_flag_reg_189 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_reg_359.read()))) {
        int_pending_loc_reg_201 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_fu_226_p2.read()))) {
        int_pending_loc_reg_201 = int_pending.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        status_reg_1_data_reg = ap_const_lv32_0;
    } else {
        if (((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, status_reg_1_vld_reg.read())) || 
             (!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
              esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_reg.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
            status_reg_1_data_reg = tmp_5_fu_294_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        status_reg_1_vld_reg = ap_const_logic_0;
    } else {
        if ((!(!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, status_reg_1_vld_reg.read()))) {
            status_reg_1_vld_reg = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_0, status_reg_1_vld_in.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_reg.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
            status_reg_1_vld_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !ap_sig_bdd_167.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()))) {
        a_addr_reg_372 =  (sc_lv<32>) (tmp_7_fu_257_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())))) {
        ap_reg_ppstg_exitcond3_reg_377_pp0_it1 = exitcond3_reg_377.read();
        ap_reg_ppstg_is_0iter_reg_391_pp0_it1 = is_0iter_reg_391.read();
        buff_load_reg_395 = buff_q0.read();
        exitcond3_reg_377 = exitcond3_fu_267_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        brmerge_reg_359 = brmerge_fu_226_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read())) {
        count = tmp_5_fu_294_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, int_pending_flag_s_fu_320_p2.read()))) {
        int_pending = rev_fu_314_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()))) {
        is_0iter_reg_391 = is_0iter_fu_284_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        tmp_1_reg_349 = tmp_1_fu_216_p2.read();
    }
}

void example::thread_a_address() {
    a_address = a_addr_reg_372.read();
}

void example::thread_a_dataout() {
    a_dataout = buff_load_reg_395.read();
}

void example::thread_a_req_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_is_0iter_reg_391_pp0_it1.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond3_reg_377_pp0_it1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        a_req_din = ap_const_logic_1;
    } else {
        a_req_din = ap_const_logic_0;
    }
}

void example::thread_a_req_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_is_0iter_reg_391_pp0_it1.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond3_reg_377_pp0_it1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        a_req_write = ap_const_logic_1;
    } else {
        a_req_write = ap_const_logic_0;
    }
}

void example::thread_a_rsp_read() {
    a_rsp_read = ap_const_logic_0;
}

void example::thread_a_size() {
    a_size = ap_const_lv32_80;
}

void example::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void example::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example::thread_ap_sig_bdd_138() {
    ap_sig_bdd_138 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void example::thread_ap_sig_bdd_151() {
    ap_sig_bdd_151 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void example::thread_ap_sig_bdd_162() {
    ap_sig_bdd_162 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void example::thread_ap_sig_bdd_167() {
    ap_sig_bdd_167 = (esl_seteq<1,1,1>(stream_in_TVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()));
}

void example::thread_ap_sig_bdd_183() {
    ap_sig_bdd_183 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void example::thread_ap_sig_bdd_193() {
    ap_sig_bdd_193 = (esl_seteq<1,1,1>(a_req_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond3_reg_377_pp0_it1.read()));
}

void example::thread_ap_sig_bdd_221() {
    ap_sig_bdd_221 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void example::thread_ap_sig_bdd_25() {
    ap_sig_bdd_25 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void example::thread_ap_sig_bdd_252() {
    ap_sig_bdd_252 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void example::thread_ap_sig_cseq_ST_pp0_stg0_fsm_4() {
    if (ap_sig_bdd_183.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_4 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_25.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_138.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_151.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_162.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st8_fsm_5() {
    if (ap_sig_bdd_221.read()) {
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_5 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st9_fsm_6() {
    if (ap_sig_bdd_252.read()) {
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_6 = ap_const_logic_0;
    }
}

void example::thread_brmerge_fu_226_p2() {
    brmerge_fu_226_p2 = (int_pending.read() | tmp_1_reg_349.read());
}

void example::thread_buff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        buff_address0 =  (sc_lv<7>) (tmp_3_fu_243_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
        buff_address0 =  (sc_lv<7>) (tmp_6_fu_279_p1.read());
    } else {
        buff_address0 = "XXXXXXX";
    }
}

void example::thread_buff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !ap_sig_bdd_167.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
          !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()))))) {
        buff_ce0 = ap_const_logic_1;
    } else {
        buff_ce0 = ap_const_logic_0;
    }
}

void example::thread_buff_d0() {
    buff_d0 = stream_in_TDATA.read();
}

void example::thread_buff_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()) && 
          !ap_sig_bdd_167.read()))) {
        buff_we0 = ap_const_logic_1;
    } else {
        buff_we0 = ap_const_logic_0;
    }
}

void example::thread_byte_wroffset_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0))) {
        byte_wroffset_0_ack_out = ap_const_logic_1;
    } else {
        byte_wroffset_0_ack_out = ap_const_logic_0;
    }
}

void example::thread_ctrl_reg_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0))) {
        ctrl_reg_0_ack_out = ap_const_logic_1;
    } else {
        ctrl_reg_0_ack_out = ap_const_logic_0;
    }
}

void example::thread_exitcond3_fu_267_p2() {
    exitcond3_fu_267_p2 = (!indvar_reg_178.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_178.read() == ap_const_lv8_80);
}

void example::thread_exitcond_fu_231_p2() {
    exitcond_fu_231_p2 = (!i_reg_167.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_167.read() == ap_const_lv8_80);
}

void example::thread_i_1_fu_237_p2() {
    i_1_fu_237_p2 = (!i_reg_167.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_reg_167.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void example::thread_indvar_next_fu_273_p2() {
    indvar_next_fu_273_p2 = (!indvar_reg_178.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(indvar_reg_178.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void example::thread_int_pending_flag_phi_fu_193_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_reg_359.read()))) {
        int_pending_flag_phi_fu_193_p4 = ap_const_lv1_1;
    } else {
        int_pending_flag_phi_fu_193_p4 = int_pending_flag_reg_189.read();
    }
}

void example::thread_int_pending_flag_s_fu_320_p2() {
    int_pending_flag_s_fu_320_p2 = (int_pending_flag_phi_fu_193_p4.read() | tmp_8_fu_307_p3.read());
}

void example::thread_int_pending_loc_phi_fu_204_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_reg_359.read()))) {
        int_pending_loc_phi_fu_204_p4 = ap_const_lv1_1;
    } else {
        int_pending_loc_phi_fu_204_p4 = int_pending_loc_reg_201.read();
    }
}

void example::thread_interrupt_r() {
    interrupt_r =  (sc_logic) ((int_pending_loc_phi_fu_204_p4.read() & rev_fu_314_p2.read()))[0];
}

void example::thread_interrupt_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_6.read()) && 
         !esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0))) {
        interrupt_r_ap_vld = ap_const_logic_1;
    } else {
        interrupt_r_ap_vld = ap_const_logic_0;
    }
}

void example::thread_is_0iter_fu_284_p2() {
    is_0iter_fu_284_p2 = (!indvar_reg_178.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_178.read() == ap_const_lv8_0);
}

void example::thread_rev_fu_314_p2() {
    rev_fu_314_p2 = (tmp_8_fu_307_p3.read() ^ ap_const_lv1_1);
}

void example::thread_status_reg() {
    status_reg = status_reg_1_data_reg.read();
}

void example::thread_status_reg_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, status_reg_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, status_reg_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        status_reg_1_ack_in = ap_const_logic_1;
    } else {
        status_reg_1_ack_in = ap_const_logic_0;
    }
}

void example::thread_status_reg_1_vld_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_5.read())) {
        status_reg_1_vld_in = ap_const_logic_1;
    } else {
        status_reg_1_vld_in = ap_const_logic_0;
    }
}

void example::thread_status_reg_ap_vld() {
    status_reg_ap_vld = status_reg_1_vld_reg.read();
}

void example::thread_stream_in_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()) && 
         !ap_sig_bdd_167.read())) {
        stream_in_TREADY = ap_const_logic_1;
    } else {
        stream_in_TREADY = ap_const_logic_0;
    }
}

void example::thread_tmp_1_fu_216_p2() {
    tmp_1_fu_216_p2 = (tmp_2_fu_212_p1.read() ^ ap_const_lv1_1);
}

void example::thread_tmp_2_fu_212_p1() {
    tmp_2_fu_212_p1 = ctrl_reg_0_data_reg.read().range(1-1, 0);
}

void example::thread_tmp_3_fu_243_p1() {
    tmp_3_fu_243_p1 = esl_zext<64,8>(i_reg_167.read());
}

void example::thread_tmp_5_fu_294_p2() {
    tmp_5_fu_294_p2 = (!count.read().is_01() || !ap_const_lv32_80.is_01())? sc_lv<32>(): (sc_biguint<32>(count.read()) + sc_biguint<32>(ap_const_lv32_80));
}

void example::thread_tmp_6_fu_279_p1() {
    tmp_6_fu_279_p1 = esl_zext<64,8>(indvar_reg_178.read());
}

void example::thread_tmp_7_fu_257_p1() {
    tmp_7_fu_257_p1 = esl_zext<64,30>(tmp_fu_248_p4.read());
}

void example::thread_tmp_8_fu_307_p3() {
    tmp_8_fu_307_p3 = ctrl_reg_0_data_reg.read().range(1, 1);
}

void example::thread_tmp_fu_248_p4() {
    tmp_fu_248_p4 = byte_wroffset_0_data_reg.read().range(31, 2);
}

void example::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, brmerge_fu_226_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_6;
            }
            break;
        case 8 : 
            if ((!ap_sig_bdd_167.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_231_p2.read()) && !ap_sig_bdd_167.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
  !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !(ap_sig_bdd_193.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_267_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st8_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st9_fsm_6;
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(status_reg_1_ack_in.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_din\" :  \"" << a_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_req_full_n\" :  \"" << a_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_req_write\" :  \"" << a_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_rsp_empty_n\" :  \"" << a_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_rsp_read\" :  \"" << a_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address\" :  \"" << a_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_datain\" :  \"" << a_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_dataout\" :  \"" << a_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_size\" :  \"" << a_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDATA\" :  \"" << stream_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TVALID\" :  \"" << stream_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_in_TREADY\" :  \"" << stream_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"byte_wroffset\" :  \"" << byte_wroffset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ctrl_reg\" :  \"" << ctrl_reg.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"status_reg\" :  \"" << status_reg.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"status_reg_ap_vld\" :  \"" << status_reg_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt_r\" :  \"" << interrupt_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt_r_ap_vld\" :  \"" << interrupt_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

